# -*- coding: utf-8 -*-
"""WomenClothReview.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18N0T4w41pQ5Y-Ya8LvBBhsEI5DFDvcl1

# **WOMEN CLOTH REVIEWS PREDICTION WITH MULTI NOMIAL NAIVE BAYS**

**The Multi Nomial Naive Bayes classifier with disecrate features (e.g. word count for text classification). It require integer feature counts. However, in practice fractional counts such as tf-idf may also work.**

#**Import Library**
"""

import pandas as pd
import numpy as np

"""#**Import Data**"""

clo=pd.read_csv('https://github.com/YBIFoundation/ProjectHub-MachineLearning/raw/main/Women%20Clothing%20E-Commerce%20Review.csv')

clo.head()

clo.info()

clo.describe()

clo.shape

"""#**Missing Values**

**Remove Missing Values in Reviews cloumns with No review text**
"""

clo.isna().sum()

clo[clo['Review']==" "]=np.NaN

clo['Review'].fillna("No Review",inplace=True)

clo.isna().sum()

clo['Review']

"""#**Define Target(Y) and Feature(X)**"""

clo.columns

x=clo['Review']

y=clo['Rating']

clo['Rating'].value_counts()

"""#**Train test Split**"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,stratify=y,random_state=2529)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

x_train = x_train.fillna('')

x_test = x_test.fillna('')

"""#**Get Feature Text Conversions to Tokens**"""

from sklearn.feature_extraction.text import CountVectorizer

cv=CountVectorizer(lowercase=True,analyzer='word',ngram_range=(2,3),stop_words='english',max_features=5000)

x_train = cv.fit_transform(x_train)

cv.get_feature_names_out()

x_train.toarray()

x_test=cv.fit_transform(x_test)

cv.get_feature_names_out()

x_test.toarray()

"""#**Get Model Train**"""

from sklearn.naive_bayes import MultinomialNB

model=MultinomialNB()

model.fit(x_train,y_train)

"""#**Get Model Prediction**"""

y_pred=model.predict(x_test)

y_pred.shape

y_pred

"""#**Get Probability of Predicted Class**"""

model.predict_proba(x_test)

"""#**Get Model Evalution**"""

from sklearn.metrics import confusion_matrix,classification_report

print(confusion_matrix(y_test,y_pred))

print(classification_report(y_test,y_pred))

"""#**Recatogries Rating as Poor (0) and Good (1)**"""

clo['Rating'].value_counts()

"""**Rerating 1,2,3 as 0 and 4,5 as 1**"""

clo.replace({'Rating':{1:0,2:0,3:0,4:1,5:1}},inplace=True)

y=clo['Rating']

x=clo['Review']

"""#**TRAIN TEST SPLIT**"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y = train_test_split(x,y,stratify=y,random_state=2529)

x_train.shape, x_test.shape,y_train.shape,y_test.shape

"""#**Get Feature Text Conversion to Tokens**"""

from sklearn.feature_extraction.text import CountVectorizer

cv=CountVectorizer(lowercase= True,analyzer='word',ngram_range=(2,3),stop_words='english',max_features=5000)

x_train=cv.fit_transform(x_train)

x_test=cv.fit_transform(x_test)

"""#**Get Model Re-Train**"""

from sklearn.naive_bayes import MultinomialNB

model=MultinomialNB()

model.fit(x_train,y_train)

"""#**Get Model Prediction**"""

y_pred=model.predict(x_test)

y_pred.shape

y_pred

"""#**Get Model Evalutaion**"""

from sklearn.metrics import confusion_matrix,classification_report

print(confusion_matrix(y_test,y_pred))

print(classification_report(y_test,y_pred))